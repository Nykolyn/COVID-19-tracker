{"version":3,"sources":["Components/Cards/Cards.jsx","api/index.js","Components/CountryPicker/CountryPicker.jsx","Components/Chart/Chart.jsx","Components/Loader/Loader.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","container","margin","card","infected","borderBottom","recovered","dead","Cards","confirmed","deaths","lastUpdate","classes","className","Grid","spacing","justify","item","xs","md","component","Card","cx","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","moment","format","fromNow","url","process","fetchData","country","a","changeableUrl","axios","get","data","modifiedData","fetchDailyData","map","reportDate","total","date","getCountries","countries","display","justifyContent","width","CountryPicker","onChange","useState","setCountries","useEffect","fetchCountries","fetchedCountries","console","error","response","FormControl","formControl","NativeSelect","defaultValue","index","key","name","Chart","dailyData","setDailyData","loading","setLoading","getData","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","title","text","initialState","positions","1","2","3","4","5","6","7","stateNumber","Loader","props","state","setNextState","bind","this","setTimer","time","timer","clearInterval","setInterval","position","VAR1","SIZE","parseInt","radioCommand","currentPositions","emptyIndex","positionForTile","indexToMove","tileIndexToMove","newPositions","Object","assign","currentState","nextState","setState","pos","styles","transition","TRANSITION","WebkitClipPath","clipPathForPosition","style","size","center","DEF_SIZE","height","renderTiles","React","Component","LoaderContainer","opacity","alignItems","flexDirection","todos","top","left","appTitleWrapper","appTitle","fontSize","fontWeight","loader","App","setData","setCountry","timeout","fetchedData","setTimeout","handleCountryChange","target","toLowerCase","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.90d7630c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CountUp from \"react-countup\";\r\nimport moment from \"moment\";\r\n\r\nconst MOMENT_FORMAT = \"MMMM Do YYYY, HH:MM:SS\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    margin: \"30px 0\",\r\n  },\r\n  card: {\r\n    margin: \"0 2% !important\",\r\n  },\r\n  infected: {\r\n    borderBottom: \"10px solid rgba(0,0, 255, 0.5)\",\r\n  },\r\n  recovered: {\r\n    borderBottom: \"10px solid rgba(0,255, 0, 0.5)\",\r\n  },\r\n  dead: {\r\n    borderBottom: \"10px solid rgba(255,0, 0, 0.5)\",\r\n  },\r\n});\r\n\r\nexport default function Cards({ confirmed, recovered, deaths, lastUpdate }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.container}>\r\n      <Grid container spacing={20} justify=\"center\">\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={3}\r\n          component={Card}\r\n          className={cx(classes.card, classes.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\".\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {moment(lastUpdate).format(MOMENT_FORMAT)},{\" \"}\r\n              {moment(lastUpdate).fromNow()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={3}\r\n          component={Card}\r\n          className={cx(classes.card, classes.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\".\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {moment(lastUpdate).format(MOMENT_FORMAT)},{\" \"}\r\n              {moment(lastUpdate).fromNow()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(classes.card, classes.dead)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\".\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {moment(lastUpdate).format(MOMENT_FORMAT)},{\" \"}\r\n              {moment(lastUpdate).fromNow()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst url = process.env.REACT_APP_API_ENDPOINT;\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country && country !== \"global\") {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n  const {\r\n    data: { confirmed, recovered, deaths, lastUpdate },\r\n  } = await axios.get(changeableUrl);\r\n\r\n  const modifiedData = {\r\n    confirmed,\r\n    recovered,\r\n    deaths,\r\n    lastUpdate,\r\n  };\r\n\r\n  return modifiedData;\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  const { data } = await axios.get(`${url}/daily`);\r\n\r\n  const modifiedData = data.map(({ confirmed, deaths, reportDate }) => ({\r\n    confirmed: confirmed.total,\r\n    deaths: deaths.total,\r\n    date: reportDate,\r\n  }));\r\n\r\n  return modifiedData;\r\n};\r\n\r\nexport const getCountries = async () => {\r\n  const { data } = await axios.get(`${url}/countries`);\r\n\r\n  return data.countries;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport { getCountries } from \"../../api\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    width: \"60%\",\r\n  },\r\n});\r\n\r\nexport default function CountryPicker({ onChange, country }) {\r\n  const classes = useStyles();\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  const fetchCountries = async () => {\r\n    try {\r\n      const fetchedCountries = await getCountries();\r\n      setCountries(fetchedCountries);\r\n    } catch (e) {\r\n      console.error(\"error while fetching countries\", e.response);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormControl className={classes.formControl}>\r\n      <NativeSelect defaultValue=\"\" value={country} onChange={onChange}>\r\n        <option value=\"global\">Global</option>\r\n        {countries.map((country, index) => (\r\n          <option key={index} value={country.name}>\r\n            {country.name}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Loader } from \"..\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    width: \"60%\",\r\n  },\r\n});\r\n\r\nexport default function Chart({\r\n  confirmed,\r\n  recovered,\r\n  deaths,\r\n  lastUpdate,\r\n  country,\r\n}) {\r\n  const classes = useStyles();\r\n  const [dailyData, setDailyData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const lineChart = dailyData && (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  );\r\n\r\n  const barChar = (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0,0, 255, 0.5)\",\r\n              \"rgba(0,255, 0, 0.5)\",\r\n              \"rgba(255,0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  );\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setDailyData(await fetchDailyData());\r\n      setLoading(false);\r\n    } catch (e) {\r\n      console.error(\"Error while getting daily data\", e);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {country && country !== \"global\" ? barChar : lineChart}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst TIMER = 150; // Milliseconds between moving the next block\r\nconst TRANSITION = 0.5; // Seconds to actually move one block\r\nconst DEF_SIZE = 60; // Pixels height/width\r\nconst GUTTER = 5; // Spacing in percentage between tiles\r\nconst initialState = {\r\n  positions: {\r\n    1: \"alpha\",\r\n    2: \"bravo\",\r\n    3: \"charlie\",\r\n    4: null,\r\n    5: \"delta\",\r\n    6: \"echo\",\r\n    7: \"foxtrot\",\r\n  },\r\n  stateNumber: 0,\r\n};\r\n\r\nclass Loader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n    this.setNextState = this.setNextState.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.setTimer(TIMER);\r\n  }\r\n  setTimer(time) {\r\n    if (this.timer) {\r\n      clearInterval(this.timer);\r\n    }\r\n    this.timer = setInterval(this.setNextState, time);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n  clipPathForPosition(position) {\r\n    position = parseInt(position, 10);\r\n    const SIZE = (100 - 2 * GUTTER) / 3;\r\n    const VAR0 = \"0% \";\r\n    const VAR1 = SIZE + GUTTER + \"% \";\r\n    const VAR2 = 2 * SIZE + 2 * GUTTER + \"% \";\r\n    switch (position) {\r\n      case 1:\r\n        return \"inset(\" + VAR1 + VAR2 + VAR1 + VAR0 + \" round 5%)\";\r\n      case 2:\r\n        return \"inset(\" + VAR0 + VAR2 + VAR2 + VAR0 + \" round 5%)\";\r\n      case 3:\r\n        return \"inset(\" + VAR0 + VAR1 + VAR2 + VAR1 + \" round 5%)\";\r\n      case 4:\r\n        return \"inset(\" + VAR1 + VAR1 + VAR1 + VAR1 + \" round 5%)\";\r\n      case 5:\r\n        return \"inset(\" + VAR2 + VAR1 + VAR0 + VAR1 + \" round 5%)\";\r\n      case 6:\r\n        return \"inset(\" + VAR2 + VAR0 + VAR0 + VAR2 + \" round 5%)\";\r\n      case 7:\r\n        return \"inset(\" + VAR1 + VAR0 + VAR1 + VAR2 + \" round 5%)\";\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n  tileIndexToMove() {\r\n    switch (this.state.stateNumber) {\r\n      case 0:\r\n        return 7;\r\n      case 1:\r\n        return 6;\r\n      case 2:\r\n        return 5;\r\n      case 3:\r\n        return 4;\r\n      case 4:\r\n        return 3;\r\n      case 5:\r\n        return 2;\r\n      case 6:\r\n        return 1;\r\n      case 7:\r\n        return 4;\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n  positionForTile(radioCommand) {\r\n    for (var position in this.state.positions) {\r\n      var tile = this.state.positions[position];\r\n      if (tile === radioCommand) {\r\n        return position;\r\n      }\r\n    }\r\n  }\r\n  setNextState() {\r\n    const currentPositions = this.state.positions;\r\n    const emptyIndex = this.positionForTile(null);\r\n    const indexToMove = this.tileIndexToMove();\r\n    const newPositions = Object.assign({}, currentPositions, {\r\n      [indexToMove]: null,\r\n      [emptyIndex]: currentPositions[indexToMove],\r\n    });\r\n\r\n    const currentState = this.state.stateNumber;\r\n    const nextState = currentState === 7 ? 0 : currentState + 1;\r\n\r\n    this.setState({ stateNumber: nextState, positions: newPositions });\r\n  }\r\n  renderTiles() {\r\n    return [\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\", \"foxtrot\"].map(\r\n      (radioCommand) => {\r\n        const pos = this.positionForTile(radioCommand);\r\n        const styles = {\r\n          transition: TRANSITION + \"s cubic-bezier(0.86, 0, 0.07, 1)\",\r\n          WebkitClipPath: this.clipPathForPosition(pos),\r\n        };\r\n        return (\r\n          <div\r\n            key={\"rect-\" + radioCommand}\r\n            style={styles}\r\n            className={\"rect \" + radioCommand}\r\n          />\r\n        );\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    const { size, style, center } = this.props;\r\n    const styles = Object.assign(\r\n      {\r\n        width: DEF_SIZE + \"px\",\r\n        height: DEF_SIZE + \"px\",\r\n      },\r\n      style\r\n    );\r\n\r\n    if (size) {\r\n      styles.width = size + \"px\";\r\n      styles.height = size + \"px\";\r\n    }\r\n\r\n    let className = \"sw-loader__wrapper\";\r\n    if (center) {\r\n      className += \" sw-loader__wrapper--center\";\r\n    }\r\n\r\n    return (\r\n      <div style={styles} className={className}>\r\n        <div className=\"sw-loader__holder\">{this.renderTiles()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass LoaderContainer extends React.Component {\r\n  render() {\r\n    const data = {\r\n      size: 200,\r\n    };\r\n\r\n    return <Loader {...data} />;\r\n  }\r\n}\r\n\r\nexport default LoaderContainer;\r\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography } from \"@material-ui/core\";\n\nimport { Cards, Chart, CountryPicker, Loader } from \"./Components\";\nimport { fetchData } from \"./api\";\n\nconst useStyles = makeStyles({\n  container: {\n    display: \"flex\",\n    transition: \"all 0.4s\",\n    opacity: 1,\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  todos: {\n    position: \"fixed\",\n    top: \"10px\",\n    left: \"10px\",\n  },\n  appTitleWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  appTitle: {\n    fontSize: \"50px\",\n    fontWeight: 700,\n\n    \"@media screen and (max-width: 768px)\": {\n      fontSize: \"20px\",\n    },\n  },\n  loader: {\n    width: \"calc(100vw - 100px)\",\n    height: \"calc(100vh - 100px)\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default function App() {\n  const classes = useStyles();\n  const [data, setData] = useState({\n    confirmed: {},\n    recovered: {},\n    deaths: {},\n    lastUpdate: \"\",\n  });\n  const [country, setCountry] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async (country, timeout) => {\n    try {\n      const fetchedData = await fetchData(country);\n      setData({\n        confirmed: fetchedData.confirmed,\n        recovered: fetchedData.recovered,\n        deaths: fetchedData.deaths,\n        lastUpdate: fetchedData.lastUpdate,\n      });\n      // setLoading(false);\n    } catch (e) {\n      console.error(\"Error while getting data: \", e);\n      // setLoading(false);\n    }\n\n    setTimeout(\n      () => {\n        setLoading(false);\n      },\n      timeout ? timeout : 2000\n    );\n  };\n\n  const handleCountryChange = async ({ target: { value } }) => {\n    try {\n      await getData(value.toLowerCase(), 500);\n      setCountry(value);\n    } catch (e) {\n      console.error(\"error while changing country\", e.response);\n    }\n  };\n\n  if (loading)\n    return (\n      <div className={classes.loader}>\n        <Loader />\n      </div>\n    );\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.appTitleWrapper}>\n        <Typography className={classes.appTitle}>C</Typography>\n        <img\n          src=\"https://www.palig.com/Media/Default/Coronavirus/Virus%20Icon.png\"\n          alt=\"covid-19\"\n        />\n        <Typography className={classes.appTitle}> vid - 19</Typography>\n      </div>\n      <Cards {...data} />\n      <CountryPicker country={country} onChange={handleCountryChange} />\n      <Chart {...data} country={country} />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./main.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}